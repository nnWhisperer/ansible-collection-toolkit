# SPDX-FileCopyrightText: Helmholtz Centre for Environmental Research (UFZ)
# SPDX-FileCopyrightText: Helmholtz-Zentrum Dresden-Rossendorf (HZDR)
#
# SPDX-License-Identifier: Apache-2.0

---

- name: "Check that all mandatory variables are defined."
  ansible.builtin.assert:
    that:
      - "keepalived_unicast_peers is defined"
      - "keepalived_virtual_ip_address is defined or keepalived_virtual_ipaddress_configs is defined"
    fail_msg: "Some mandatory variables are not set."
    success_msg: "All mandatory variables are set."

- name: "Install dependencies for Keepalived."
  become: true
  ansible.builtin.package:
    name: "{{ keepalived_dependencies }}"
    state: "present"
    update_cache: true

- name: "Create Keepalived Configuration Directory."
  become: true
  ansible.builtin.file:
    path: "{{ keepalived_conf_dir }}"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: "Check whether Keepalived binary is installed."
  ansible.builtin.stat:
    path: "{{ keepalived_executable_path }}"
  register: "__keepalived_binary"

- name: "Determine if this is an initial dry-run"
  ansible.builtin.set_fact:
    __initial_dry_run: "{{ ansible_check_mode and not __keepalived_binary.stat.exists }}"

- name: "Get Keepalived version."
  ansible.builtin.command:
    cmd: "{{ keepalived_executable_path }} --version"
  register: "__keepalived_version_installed"
  when: "__keepalived_binary.stat.exists"
  changed_when: false
  check_mode: false

- name: "Put value of installed version into an Ansible fact."
  ansible.builtin.set_fact:
    __installed_keepalived_version: "{{ __keepalived_version_installed.stderr | regex_search('^Keepalived v(\\d+\\.\\d+\\.\\d+)', '\\1') | first }}"
  when: "__keepalived_binary.stat.exists"

- name: "Output version strings of installed and to be installed Keepalived."
  ansible.builtin.debug:
    msg: "Installed version: {{ __installed_keepalived_version }}, version to be installed: {{ keepalived_version }}."
  when: "__installed_keepalived_version is defined"

- name: "Check if both version strings are equal."
  ansible.builtin.set_fact:
    __is_keepalived_version_equal: "{{ __installed_keepalived_version is version(keepalived_version, operator='==', strict=True) }}"
  when: "__keepalived_binary.stat.exists"

- name: "Continue with installing Keepalived if Keepalived is not already installed or versions are not equal."
  when: >-
    not __keepalived_binary.stat.exists or
    not __is_keepalived_version_equal
  block:

    - name: "Create temporary Keepalived build directory."
      become: true
      ansible.builtin.tempfile:
        state: "directory"
        prefix: "keepalived-{{ keepalived_version }}_"
      register: "__tempdir"
      check_mode: false

    - name: "Store temporary build directory path"
      ansible.builtin.set_fact:
        __keepalived_build_dir: "{{ __tempdir.path }}"

    - name: "Download and extract keepalived archive."
      become: true
      ansible.builtin.unarchive:
        src: "{{ keepalived_download_url }}"
        dest: "{{ __keepalived_build_dir }}"
        remote_src: true
        extra_opts:
          - "--strip-components=1"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: "Configure Keepalived to be build."
      become: true
      ansible.builtin.command: "./configure"
      args:
        chdir: "{{ __keepalived_build_dir }}"
      changed_when: true

    - name: "Build Keepalived from source."
      become: true
      community.general.make:
        chdir: "{{ __keepalived_build_dir }}"
      when: "not __initial_dry_run"

    - name: "Install Keepalived binaries."
      become: true
      community.general.make:
        chdir: "{{ __keepalived_build_dir }}"
        target: "install"
      notify: "Restart Keepalived"
      when: "not __initial_dry_run"

    - name: "Copy Keepalived sysconfig file"
      become: true
      ansible.builtin.copy:
        src: "{{ __keepalived_build_dir }}/keepalived/etc/sysconfig/keepalived"
        dest: "{{ keepalived_sysconfig_file_path }}"
        owner: "root"
        group: "root"
        mode: "0644"
        remote_src: true
      when: "not ansible_check_mode"
  always:
    - name: "Remove temporary build directory"
      become: true
      ansible.builtin.file:
        path: "{{ __keepalived_build_dir }}"
        state: "absent"
      check_mode: false

- name: "Create Configuration File."
  become: true
  ansible.builtin.template:
    src: "{{ keepalived_conf_template }}"
    dest: "{{ keepalived_conf_file_path }}"
    owner: "root"
    group: "root"
    mode: "0644"
    validate: "{{ __keepalived_binary.stat.exists | ternary(keepalived_executable_path ~ ' --config-test --use-file %s', omit) }}"
  notify: "Reload Keepalived"

- name: "Create Keepalived Service Unit File."
  ansible.builtin.template:
    src: "{{ keepalived_service_template }}"
    dest: "{{ keepalived_service_file_path }}"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: "Restart Keepalived"

- name: "Start Keepalived Systemd Service."
  become: true
  ansible.builtin.service:
    name: "keepalived"
    state: "started"
    enabled: true
    daemon_reload: true
  when: "not __initial_dry_run"

...
